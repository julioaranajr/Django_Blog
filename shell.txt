=============
Create Post
=============

❯ python manage.py shell
Python 3.10.12 (main, Jul 29 2024, 16:56:48) [GCC 11.4.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)

>>> from blog.models import Post

>>> from django.contrib.auth.models import User

>>> User.objects.all()
<QuerySet [<User: julioaranajr>, <User: nizar>, <User: guest>, <User: dci>]>

>>> User.objects.first()
<User: julioaranajr>

>>> User.objects.filter(username='julioaranajr').first()
<User: julioaranajr>

>>> user = User.objects.filter(username='julioaranajr').first()

>>> user
<User: julioaranajr>

>>> user.id
1

>>> user.pk
1

>>> user = User.objects.get(id=1)

>>> user
<User: julioaranajr>

>>> Post.objects.all()
<QuerySet []>

>>> post_1 = Post(title='Post1', content='First Post Content from the python shell!', author=user)

>>> post_1.save()

>>> Post.objects.all()
<QuerySet [<Post: Post object (1)>]>

>>> from blog.models import Post

>>> from django.contrib.auth.models import User

>>> Post.objects.all()
<QuerySet [<Post: Post1>]>

>>> user = User.objects.get(id=1)

>>> user
<User: julioaranajr>

>>> post_2 = Post(title='Post2', content='Second Post Content from the python shell!', author_id=user.id)
>>> post_2.save()

>>> post_3 = Post(title='Post3', content='Third Post Content from the python shell!', author_id=user.id)
>>> post_3.save()

>>> Post.objects.all()
<QuerySet [<Post: Post1>, <Post: Post2>, <Post: Post3>]>

>>> post = Post.objects.first()

>>> post.content
'First Post Content from the python shell!'

>>> post.date_posted
datetime.datetime(2024, 8, 25, 15, 43, 23, 128933, tzinfo=datetime.timezone.utc)

>>> post.author
<User: julioaranajr>

>>> post = Post.objects.first()
>>> post.content
'First Post Content from the python shell!'

>>> post.date_posted
datetime.datetime(2024, 8, 25, 15, 43, 23, 128933, tzinfo=datetime.timezone.utc)

>>> post.author
<User: julioaranajr>

>>> post.author.email
'julio.arana.jr@gmail.com'

>>> user.post_set
<django.db.models.fields.related_descriptors.create_reverse_many_to_one_manager.<locals>.RelatedManager object at 0x70e96704e230>
>>> user.post_set.all()
<QuerySet [<Post: Post1>, <Post: Post2>, <Post: Post3>]>

>>> user.post_set.create(title='Post4', content='Post Content using: [user.post_set.create]')
<Post: Post4>

>>> user.post_set.all()
<QuerySet [<Post: Post1>, <Post: Post2>, <Post: Post3>, <Post: Post4>]>

>>>exit() 

=============
Pagination
=============

❯ python manage.py shell
Python 3.10.12 (main, Jul 29 2024, 16:56:48) [GCC 11.4.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> import json
>>> from blog.models import Post
>>> from django.contrib.auth.models import User
>>> with open('posts.json') as f:
...   posts_json = json.load(f)
... 
>>> for post in posts_json:
...   post = Post(title=post['title'], content=post['content'], author_id=post['user_id'])
...   post.save()
... 
>>> User.objects.all()
<QuerySet [<User: julioaranajr>, <User: nizar>, <User: guest>, <User: dci>, <User: testing>]>
>>> Post.objects.all()
<QuerySet [<Post: Using Python Shell>, <Post: New post from the shell>, <Post: More python shell>, 
<Post: user.post_set.create>, <Post: Create, Update, and Delete Posts>, <Post: Update Models, URLS and Views>, 
<Post: Python Basics>, <Post: Object-Oriented Programming in Python>, <Post: Python Classes and Objects>, 
<Post: Inheritance in Python>, <Post: Polymorphism in Python>, <Post: Encapsulation in Python>, 
<Post: Python Constructors and Destructors>, <Post: Python Class Attributes and Methods>, 
<Post: Python Method Overriding>, <Post: Python Method Overloading>, 
<Post: Python Abstract Classes and Interfaces>, <Post: Python Multiple Inheritance>, 
<Post: Python Composition vs Inheritance>, <Post: Python Method Chaining>, 
'...(remaining elements truncated)...']>

>>>exit() 
